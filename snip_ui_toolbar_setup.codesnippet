<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>IDECodeSnippetCompletionPrefix</key>
	<string>snip_ui_toolbar_setup</string>
	<key>IDECodeSnippetCompletionScopes</key>
	<array>
		<string>All</string>
	</array>
	<key>IDECodeSnippetContents</key>
	<string>// UIToolbar setup with bar button items

@interface MyViewController ()
@property (nonatomic, strong) UIToolbar *toolbar;
@end
	<key>IDECodeSnippetIdentifier</key>
	<string>F2A3B4C5-D6E7-8F9A-0B1C-2D3E4F5A6B7C</string>
	<key>IDECodeSnippetLanguage</key>
	<string>Xcode.SourceCodeLanguage.Objective-C</string>
	<key>IDECodeSnippetSummary</key>
	<string>UIToolbar setup with bar button items and actions</string>
	<key>IDECodeSnippetTitle</key>
	<string>UI Toolbar Setup</string>
	<key>IDECodeSnippetUserSnippet</key>
	<true/>
	<key>IDECodeSnippetVersion</key>
	<integer>2</integer>
</dict>
</plist>

@implementation MyViewController

- (void)viewDidLoad {
    [super viewDidLoad];
    
    // Create toolbar
    CGFloat toolbarHeight = 44.0;
    self.toolbar = [[UIToolbar alloc] initWithFrame:CGRectMake(0, self.view.bounds.size.height - toolbarHeight, self.view.bounds.size.width, toolbarHeight)];
    
    // Customize appearance
    self.toolbar.barStyle = UIBarStyleDefault;
    self.toolbar.translucent = YES;
    self.toolbar.tintColor = [UIColor systemBlueColor];
    
    // Create bar button items
    UIBarButtonItem *addButton = [[UIBarButtonItem alloc] initWithBarButtonSystemItem:UIBarButtonSystemItemAdd
                                                                               target:self
                                                                               action:@selector(addButtonTapped)];
    
    UIBarButtonItem *editButton = [[UIBarButtonItem alloc] initWithTitle:@"Edit"
                                                                   style:UIBarButtonItemStylePlain
                                                                  target:self
                                                                  action:@selector(editButtonTapped)];
    
    UIBarButtonItem *deleteButton = [[UIBarButtonItem alloc] initWithBarButtonSystemItem:UIBarButtonSystemItemTrash
                                                                                  target:self
                                                                                  action:@selector(deleteButtonTapped)];
    
    // Flexible space (pushes items apart)
    UIBarButtonItem *flexibleSpace = [[UIBarButtonItem alloc] initWithBarButtonSystemItem:UIBarButtonSystemItemFlexibleSpace
                                                                                   target:nil
                                                                                   action:nil];
    
    // Fixed space
    UIBarButtonItem *fixedSpace = [[UIBarButtonItem alloc] initWithBarButtonSystemItem:UIBarButtonSystemItemFixedSpace
                                                                                 target:nil
                                                                                 action:nil];
    fixedSpace.width = 50.0;
    
    // Custom view button
    UIButton *customButton = [UIButton buttonWithType:UIButtonTypeSystem];
    [customButton setTitle:@"Custom" forState:UIControlStateNormal];
    [customButton addTarget:self action:@selector(customButtonTapped) forControlEvents:UIControlEventTouchUpInside];
    UIBarButtonItem *customBarButton = [[UIBarButtonItem alloc] initWithCustomView:customButton];
    
    // Set toolbar items
    [self.toolbar setItems:@[addButton, flexibleSpace, editButton, flexibleSpace, deleteButton] animated:NO];
    
    [self.view addSubview:self.toolbar];
}

#pragma mark - Actions

- (void)addButtonTapped {
    NSLog(@"Add tapped");
}

- (void)editButtonTapped {
    NSLog(@"Edit tapped");
}

- (void)deleteButtonTapped {
    NSLog(@"Delete tapped");
}

- (void)customButtonTapped {
    NSLog(@"Custom tapped");
}

// Update toolbar items
- (void)updateToolbarItems {
    UIBarButtonItem *doneButton = [[UIBarButtonItem alloc] initWithBarButtonSystemItem:UIBarButtonSystemItemDone
                                                                                target:self
                                                                                action:@selector(doneButtonTapped)];
    [self.toolbar setItems:@[doneButton] animated:YES];
}

@end